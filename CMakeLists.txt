SET( QQUICKMATERIALHELPER_TARGET "QQuickMaterialHelper" CACHE STRING "Target Name" )
SET( QQUICKMATERIALHELPER_PROJECT "QQuickMaterialHelper" CACHE STRING "Project Name")
SET( QQUICKMATERIALHELPER_BUILD_SHARED OFF CACHE BOOL "Build as a shared library" )
SET( QQUICKMATERIALHELPER_USE_NAMESPACE ON CACHE BOOL "Should the library be compiled with a namespace. Default: ON" )
SET( QQUICKMATERIALHELPER_NAMESPACE "QQuickMaterialHelper" CACHE STRING "Namespace of the library is QQUICKMATERIALHELPER_USE_NAMESPACE is ON. Default : QQuickMaterialHelper" )

SET(QQUICKMATERIALHELPER_VERSION_MAJOR 1)
SET(QQUICKMATERIALHELPER_VERSION_MINOR 0)
SET(QQUICKMATERIALHELPER_VERSION_PATCH 0)
IF( EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/.git" )
	EXECUTE_PROCESS(
		COMMAND git describe --always
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		OUTPUT_VARIABLE QQUICKMATERIALHELPER_VERSION_TAG
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)
ENDIF()
IF(NOT QQUICKMATERIALHELPER_VERSION_TAG)
	SET( QQUICKMATERIALHELPER_VERSION_TAG 00000000 )
ENDIF(NOT QQUICKMATERIALHELPER_VERSION_TAG)
SET( QQUICKMATERIALHELPER_VERSION_TAG_HEX 0x${QQUICKMATERIALHELPER_VERSION_TAG})

PROJECT( ${QQUICKMATERIALHELPER_PROJECT} )
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

# ─── GLOBAL ────────
MESSAGE( STATUS "------ ${QQUICKMATERIALHELPER_TARGET} Configuration ------" )
MESSAGE( STATUS "QQUICKMATERIALHELPER_PROJECT                : ${QQUICKMATERIALHELPER_PROJECT}" )
MESSAGE( STATUS "QQUICKMATERIALHELPER_TARGET                 : ${QQUICKMATERIALHELPER_TARGET}" )
MESSAGE( STATUS "QQUICKMATERIALHELPER_BUILD_SHARED           : ${QQUICKMATERIALHELPER_BUILD_SHARED}" )
MESSAGE( STATUS "QQUICKMATERIALHELPER_VERSION                : ${QQUICKMATERIALHELPER_VERSION_MAJOR}.${QQUICKMATERIALHELPER_VERSION_MINOR}.${QQUICKMATERIALHELPER_VERSION_PATCH}" )
MESSAGE( STATUS "QQUICKMATERIALHELPER_VERSION_TAG_HEX        : ${QQUICKMATERIALHELPER_VERSION_TAG_HEX}" )

MESSAGE( STATUS "------ ${QQUICKMATERIALHELPER_TARGET} End Configuration ------" )

SET( CMAKE_AUTOMOC ON )
SET( CMAKE_AUTORCC ON )
set (CMAKE_CXX_STANDARD 11) 

SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)

FIND_PACKAGE(Qt5Core CONFIG REQUIRED CMAKE_FIND_ROOT_PATH_BOTH)
FIND_PACKAGE(Qt5Quick CONFIG REQUIRED CMAKE_FIND_ROOT_PATH_BOTH)
FIND_PACKAGE(Qt5QuickControls2 CONFIG REQUIRED CMAKE_FIND_ROOT_PATH_BOTH)
FIND_PACKAGE(Qt5QuickCompiler CONFIG REQUIRED CMAKE_FIND_ROOT_PATH_BOTH)

# ────────── SOURCES ──────────────────────────────────────────

# Add qml to the qtquick compiler
qtquick_compiler_add_resources(QQUICKMATERIALHELPER_QML_RES ${CMAKE_CURRENT_SOURCE_DIR}/qml/QQuickMaterialHelper.qrc)

# Trick to rerun cmake each time qml.qrc is updated
CONFIGURE_FILE(
  ${CMAKE_CURRENT_SOURCE_DIR}/qml/QQuickMaterialHelper.qrc
  ${CMAKE_CURRENT_BINARY_DIR}/QQuickMaterialHelper.junk
)
CONFIGURE_FILE(
  ${CMAKE_CURRENT_SOURCE_DIR}/fonts/QQuickMaterialHelperFonts.qrc
  ${CMAKE_CURRENT_BINARY_DIR}/QQuickMaterialHelperFonts.junk
)

# Dont Run Moc on cpp file generated from cpp
FOREACH(CacheQml ${QQUICKMATERIALHELPER_QML_RES})
	SET_PROPERTY(SOURCE ${CacheQml} PROPERTY SKIP_AUTOMOC ON)
	SOURCE_GROUP( "QmlMoc Files" FILES ${CacheQml} )
ENDFOREACH(CacheQml)

file(GLOB_RECURSE QQUICKMATERIALHELPER_QML_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/qml/*.qml)

foreach(_source IN ITEMS ${QQUICKMATERIALHELPER_QML_SRCS})
	get_filename_component(_source_path "${_source}" PATH)
	file(RELATIVE_PATH _source_path_rel ${CMAKE_CURRENT_SOURCE_DIR} "${_source_path}")
	string(REPLACE "/" "\\" _group_path "${_source_path_rel}")
	source_group("${_group_path}" FILES "${_source}")
endforeach()


SET(QQUICKMATERIALHELPER_SRCS
	${QQUICKMATERIALHELPER_QML_RES}
	${CMAKE_CURRENT_SOURCE_DIR}/src/QQuickMaterialHelper.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/QQuickMaterialHelper.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/fonts/QQuickMaterialHelperFonts.qrc
	${QQUICKMATERIALHELPER_QML_SRCS}
	)

IF(${QQUICKMATERIALHELPER_BUILD_SHARED})
	ADD_LIBRARY( ${QQUICKMATERIALHELPER_TARGET} SHARED ${QQUICKMATERIALHELPER_SRCS} )
	IF( MSVC )
	GENERATE_EXPORT_HEADER( ${QQUICKMATERIALHELPER_TARGET}
		BASE_NAME ${QQUICKMATERIALHELPER_TARGET}
		EXPORT_MACRO_NAME ${QQUICKMATERIALHELPER_TARGET}_EXPORT
		EXPORT_FILE_NAME ${QQUICKMATERIALHELPER_TARGET}_Export.h
		STATIC_DEFINE ${QQUICKMATERIALHELPER_TARGET}_BUILT_AS_STATIC
	)
	ENDIF( MSVC )
	TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPER_TARGET} PUBLIC -DQQUICKMATERIALHELPER_SHARED )
ELSE(${QQUICKMATERIALHELPER_BUILD_SHARED})
	ADD_LIBRARY( ${QQUICKMATERIALHELPER_TARGET} STATIC ${QQUICKMATERIALHELPER_SRCS} )
	TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPER_TARGET} PUBLIC -DQQUICKMATERIALHELPER_STATIC )
ENDIF(${QQUICKMATERIALHELPER_BUILD_SHARED})

qt5_use_modules( ${QQUICKMATERIALHELPER_TARGET} Core Gui Svg QuickControls2 Quick )
TARGET_INCLUDE_DIRECTORIES( ${QQUICKMATERIALHELPER_TARGET} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src )
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPER_TARGET} PRIVATE -DQQUICKMATERIALHELPER_VERSION_MAJOR=${QQUICKMATERIALHELPER_VERSION_MAJOR} )
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPER_TARGET} PRIVATE -DQQUICKMATERIALHELPER_VERSION_MINOR=${QQUICKMATERIALHELPER_VERSION_MINOR} )
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPER_TARGET} PRIVATE -DQQUICKMATERIALHELPER_VERSION_PATCH=${QQUICKMATERIALHELPER_VERSION_PATCH} )
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPER_TARGET} PRIVATE -DQQUICKMATERIALHELPER_VERSION_TAG=${QQUICKMATERIALHELPER_VERSION_TAG} )
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPER_TARGET} PRIVATE -DQQUICKMATERIALHELPER_VERSION_TAG_HEX=${QQUICKMATERIALHELPER_VERSION_TAG_HEX} )
IF(QQUICKMATERIALHELPER_USE_NAMESPACE)
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPER_TARGET} PUBLIC -DQQUICKMATERIALHELPER_USE_NAMESPACE )
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPER_TARGET} PUBLIC -DQQUICKMATERIALHELPER_NAMESPACE=${QQUICKMATERIALHELPER_NAMESPACE} )
ENDIF(QQUICKMATERIALHELPER_USE_NAMESPACE)

TARGET_LINK_LIBRARIES( ${QQUICKMATERIALHELPER_TARGET} )
qt5_use_modules( ${QQUICKMATERIALHELPER_TARGET} Core Gui Svg Xml XmlPatterns Quick QuickControls2 )